@page "/blogadd"

@inject BlogService BlogService
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="row mb-2">
    <div class="col-md-2 align-items-center d-flex">
        <RadzenLabel Text="Başlık:" />
    </div>
    <div class="col-md-4">
        <RadzenTextBox class="w-100" @bind-Value="newBlog.Header" />
    </div>

    <div class="col-md-2 align-items-center d-flex">
        <RadzenLabel Text="Yayın Durumu:" />
    </div>
    <div class="col-md-4">
        <RadzenCheckBox @bind-Value="newBlog.Status" />
    </div>
</div>

<div class="row mb-2">
    <div class="col-md-2 align-items-center d-flex">
        <RadzenLabel Text="Kapak Fotoğrafı:" />
    </div>
    <div class="col-md-4">
        <RadzenUpload Change=@OnSelectFiles
                      Accept="image/*"
                      Icon="upload"
                      class="w-100" />
    </div>
</div>

<div class="row">
    <div class="col-md-2 align-items-center d-flex">
        <RadzenLabel Text="İçerik:" />
    </div>
    <div class="col-md-10">
        <RadzenHtmlEditor @bind-Value="newBlog.Content" style="height: 300px;" />
    </div>
</div>

<div class="row mt-3">
    <div class="col-md-12">
        <RadzenButton Click="@Save" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(_isLoading == false)" />
        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
    </div>
</div>

@code {
    CMS.Model.Blog.BlogCreateModel newBlog = new Model.Blog.BlogCreateModel();
    bool _isLoading = false;

    private async Task Save()
    {
        _isLoading = true;

        if (newBlog.Header == null)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Lütfen Başlık Giriniz" });
            return;
        }
        var result = await BlogService.AddAsync(newBlog);

        if (!result.IsSuccessStatusCode)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = result.StatusCode.ToString() });
            _isLoading = false;
            return;
        }

        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = result.StatusCode.ToString() });

        DialogService.Close(true);
        _isLoading = false;
    }

    async Task OnSelectFiles(UploadChangeEventArgs args)
    {
        var selectedFile = args.Files.First();
        newBlog.Cover = new Model.Blog.BlogCreateFileModel
        {
            FileName = selectedFile.Name
        };

        using MemoryStream memoryStream = new MemoryStream();
        await selectedFile.OpenReadStream(selectedFile.Size).CopyToAsync(memoryStream);
        newBlog.Cover.CoverBase64 = Convert.ToBase64String(memoryStream.ToArray());
    }
}
